
=head1 NAME

MCE::Examples - A list of examples demonstrating Many-Core Engine

=head1 VERSION

This document describes MCE::Examples version 1.522

=head1 DESCRIPTION

MCE comes with various examples showing real-world scenarios on parallelizing
something as small as cat (try with -n) to searching for patterns and word
count aggregation. MCE 1.522 adds sampledb to the list demonstrating DBI
with MCE.

=head1 INCLUDED WITH THE DISTRIBUTION

A wrapper script for parallelizing the grep binary. Hence, processing is done
by the binary, not Perl. This wrapper resides under the bin directory.

   mce_grep
        A wrapper script with support for the following C binaries.
        agrep, grep, egrep, fgrep, and tre-agrep

        Chunking may be applied either at the [file] level, for large
        file(s), or at the [list] level when parsing many files
        recursively.

        The gain in performance is noticeable for expensive patterns,
        especially with agrep and tre-agrep.

The following scripts are located under the examples directory.

   cat.pl, egrep.pl, wc.pl
        Concatenation, egrep, and word count scripts similar to the
        cat, egrep, and wc binaries respectively.

   files_flow.pl, files_mce.pl, files_thr.pl
        Demonstrates MCE::Flow, MCE::Queue, and Thread::Queue.
        See MCE::Queue synopsis for another variation.

   findnull.pl
        A parallel script for reporting lines containing null fields.
        It is many times faster than the egrep binary. Try this against
        a large file containing very long lines.

   flow_demo.pl, flow_model.pl
        Demonstrates MCE::Flow, MCE::Queue, and MCE->gather.

   foreach.pl, forseq.pl, forchunk.pl
        This example demonstrates the sqrt example from Parallel::Loops.
        Parallel::Loops utilizes Parallel::ForkManager.

        Tested on Mac OS X 10.9.5; with Perl 5.16.2; 2.6 GHz Core i7;
        1600 MHz RAM. The number indicates the size of input displayed
        in 1 second. Output was directed to >/dev/null during testing.

        Parallel::Loops:        800  Forking each @input is expensive
        MCE->foreach...:     70,000  Workers persist between each @input
        MCE->forseq....:    200,000  Uses sequence of numbers as input
        MCE->forchunk..:  1,000,000  IPC overhead is greatly reduced

   interval.pl
        Demonstration of the interval option appearing in MCE 1.5.

   iterator.pl
        Similar to forseq.pl. Specifies an iterator for input_data.
        A factory function is called which returns a closure.

   ping.pl, pipe1.pl, pipe2.pl
        Report back failed pings to standard output.

        Process STDIN or FILE in parallel. Processing is via Perl for
        pipe1.pl, whereas an external command for pipe2.pl.

   seq_demo.pl, step_demo.pl
        Demonstration of the new sequence option appearing in MCE 1.3.
        Run with seq_demo.pl | sort

        Transparent use of MCE::Queue with MCE::Step.

   sync.pl, utf8.pl
        Barrier synchronization demonstration.
        Process input containing unicode data.

The rest are organized into various sub directories.

   matmult/matmult_base*.pl, matmult_mce*.pl, strassen_mce*.pl
        Various matrix multiplication demonstrations benchmarking
        PDL, PDL + MCE, as well as parallelizing Strassen's
        divide-and-conquer algorithm. Included are 2 plain
        Perl examples.

   sampledb/create.pl, query*.pl, update*.pl
        Examples demonstrating DBI (SQLite) with MCE.

   tbray/wf_mce1.pl, wf_mce2.pl, wf_mce3.pl
        An implementation of wide finder utilizing MCE.
        As fast as MMAP IO when file resides in OS FS cache.
        2x ~ 3x faster when reading directly from disk.

=head1 CHUNK_SIZE => 1 (in essence, wanting no chunking on input data)

Imagine a long running process and wanting to parallelize an array against a
pool of workers. The sequence option may be used if simply wanting to loop
through a sequence of numbers instead.

Below, a callback function is used for displaying results. The logic shows
how one can output results immediately while still preserving output order
as if processing serially. The %tmp hash is a temporary cache for
out-of-order results.

   use MCE;

   ## Return an iterator for preserving output order.

   sub preserve_order {
      my (%result_n, %result_d); my $order_id = 1;

      return sub {
         my ($chunk_id, $n, $data) = @_;

         $result_n{ $chunk_id } = $n;
         $result_d{ $chunk_id } = $data;

         while (1) {
            last unless exists $result_d{$order_id};

            printf "n: %5d sqrt(n): %7.3f\n",
               $result_n{$order_id}, $result_d{$order_id};

            delete $result_n{$order_id};
            delete $result_d{$order_id};

            $order_id++;
         }

         return;
      };
   }

   ## Use $chunk_ref->[0] or $_ to retrieve the element.
   my @input_data = (0 .. 18000 - 1);

   my $mce = MCE->new(
      gather => preserve_order, input_data => \@input_data,
      chunk_size => 1, max_workers => 3,

      user_func => sub {
         my ($mce, $chunk_ref, $chunk_id) = @_;
         MCE->gather($chunk_id, $_, sqrt($_));
      }
   );

   $mce->run;

This does the same thing using the foreach "sugar" method. 

   use MCE;

   sub preserve_order {
      ...
   }

   my $mce = MCE->new(
      chunk_size => 1, max_workers => 3,
      gather => preserve_order
   );

   ## Use $chunk_ref->[0] or $_ to retrieve the element.
   my @input_data = (0 .. 18000 - 1);

   $mce->foreach( \@input_data, sub {
      my ($mce, $chunk_ref, $chunk_id) = @_;
      MCE->gather($chunk_id, $_, sqrt($_));
   });

The 2 examples described above were done using the Core API. MCE 1.5 comes
with several models. The L<MCE::Loop|MCE::Loop> model is used below.

   use MCE::Loop;

   sub preserve_order {
      ...
   }

   MCE::Loop::init {
      chunk_size => 1, max_workers => 3,
      gather => preserve_order
   };

   ## Use $chunk_ref->[0] or $_ to retrieve the element.
   my @input_data = (0 .. 18000 - 1);

   mce_loop {
      my ($mce, $chunk_ref, $chunk_id) = @_;
      MCE->gather($chunk_id, $_, sqrt($_));

   } @input_data;

   MCE::Loop::finish;

=head1 CHUNKING INPUT_DATA

Chunking has the effect of reducing IPC overhead by many folds. A chunk
containing $chunk_size items is sent to the next available worker.

   use MCE;

   ## Return an iterator for preserving output order.

   sub preserve_order {
      my (%result_n, %result_d, $size); my $order_id = 1;

      return sub {
         my ($chunk_id, $n_ref, $data_ref) = @_;

         $result_n{ $chunk_id } = $n_ref;
         $result_d{ $chunk_id } = $data_ref;

         while (1) {
            last unless exists $result_d{$order_id};
            $size = @{ $result_d{$order_id} };

            for (0 .. $size - 1) {
               printf "n: %5d sqrt(n): %7.3f\n",
                  $result_n{$order_id}->[$_], $result_d{$order_id}->[$_];
            }

            delete $result_n{$order_id};
            delete $result_d{$order_id};

            $order_id++;
         }

         return;
      };
   }

   ## Chunking requires one to loop inside the code block.
   my @input_data = (0 .. 18000 - 1);

   my $mce = MCE->new(
      gather => preserve_order, input_data => \@input_data,
      chunk_size => 500, max_workers => 3,

      user_func => sub {
         my ($mce, $chunk_ref, $chunk_id) = @_;
         my (@n, @result);

         foreach ( @{ $chunk_ref } ) {
            push @n, $_;
            push @result, sqrt($_);
         }

         MCE->gather($chunk_id, \@n, \@result);
      }
   );

   $mce->run;

This does the same thing using the forchunk "sugar" method. 

   use MCE;

   sub preserve_order {
      ...
   }

   my $mce = MCE->new(
      chunk_size => 500, max_workers => 3,
      gather => preserve_order
   );

   ## Chunking requires one to loop inside the code block.
   my @input_data = (0 .. 18000 - 1);

   $mce->forchunk( \@input_data, sub {
      my ($mce, $chunk_ref, $chunk_id) = @_;
      my (@n, @result);

      foreach ( @{ $chunk_ref } ) {
         push @n, $_;
         push @result, sqrt($_);
      }

      MCE->gather($chunk_id, \@n, \@result);
   });

Finally, chunking with the L<MCE::Loop|MCE::Loop> model.

   use MCE::Loop;

   sub preserve_order {
      ...
   }

   MCE::Loop::init {
      chunk_size => 500, max_workers => 3,
      gather => preserve_order
   };

   ## Chunking requires one to loop inside the code block.
   my @input_data = (0 .. 18000 - 1);

   mce_loop {
      my ($mce, $chunk_ref, $chunk_id) = @_;
      my (@n, @result);

      foreach ( @{ $chunk_ref } ) {
         push @n, $_;
         push @result, sqrt($_);
      }

      MCE->gather($chunk_id, \@n, \@result);

   } @input_data;

   MCE::Loop::finish;

=head1 DEMO APPLYING SEQUENCES WITH USER_TASKS

The following is an extract from the seq_demo.pl example included with MCE. 
Think of having several MCEs running in parallel. The sequence and chunk_size
options may be specified uniquely per each task.

The input scalar $_ (not shown below) contains the same value as $seq_n in
user_func.

   use MCE;
   use Time::HiRes 'sleep';

   ## Run with seq_demo.pl | sort

   sub user_func {
      my ($mce, $seq_n, $chunk_id) = @_;

      my $wid      = MCE->wid;
      my $task_id  = MCE->task_id;
      my $task_wid = MCE->task_wid;

      if (ref $seq_n eq 'ARRAY') {
         ## seq_n or $_ is an array reference when chunk_size > 1
         foreach (@{ $seq_n }) {
            MCE->printf(
               "task_id %d: seq_n %s: chunk_id %d: wid %d: task_wid %d\n",
               $task_id,    $_,       $chunk_id,   $wid,   $task_wid
            );
         }
      }
      else {
         MCE->printf(
            "task_id %d: seq_n %s: chunk_id %d: wid %d: task_wid %d\n",
            $task_id,    $seq_n,   $chunk_id,   $wid,   $task_wid
         );
      }

      sleep 0.003;

      return;
   }

   ## Each task can be configured uniquely.

   my $mce = MCE->new(
      user_tasks => [{
         max_workers => 2,
         chunk_size  => 1,
         sequence    => { begin => 11, end => 19, step => 1 },
         user_func   => \&user_func
      },{
         max_workers => 2,
         chunk_size  => 5,
         sequence    => { begin => 21, end => 29, step => 1 },
         user_func   => \&user_func
      },{
         max_workers => 2,
         chunk_size  => 3,
         sequence    => { begin => 31, end => 39, step => 1 },
         user_func   => \&user_func
      }]
   );

   $mce->run;

   -- Output

   task_id 0: seq_n 11: chunk_id 1: wid 2: task_wid 2
   task_id 0: seq_n 12: chunk_id 2: wid 1: task_wid 1
   task_id 0: seq_n 13: chunk_id 3: wid 2: task_wid 2
   task_id 0: seq_n 14: chunk_id 4: wid 1: task_wid 1
   task_id 0: seq_n 15: chunk_id 5: wid 2: task_wid 2
   task_id 0: seq_n 16: chunk_id 6: wid 1: task_wid 1
   task_id 0: seq_n 17: chunk_id 7: wid 2: task_wid 2
   task_id 0: seq_n 18: chunk_id 8: wid 1: task_wid 1
   task_id 0: seq_n 19: chunk_id 9: wid 2: task_wid 2
   task_id 1: seq_n 21: chunk_id 1: wid 3: task_wid 1
   task_id 1: seq_n 22: chunk_id 1: wid 3: task_wid 1
   task_id 1: seq_n 23: chunk_id 1: wid 3: task_wid 1
   task_id 1: seq_n 24: chunk_id 1: wid 3: task_wid 1
   task_id 1: seq_n 25: chunk_id 1: wid 3: task_wid 1
   task_id 1: seq_n 26: chunk_id 2: wid 4: task_wid 2
   task_id 1: seq_n 27: chunk_id 2: wid 4: task_wid 2
   task_id 1: seq_n 28: chunk_id 2: wid 4: task_wid 2
   task_id 1: seq_n 29: chunk_id 2: wid 4: task_wid 2
   task_id 2: seq_n 31: chunk_id 1: wid 5: task_wid 1
   task_id 2: seq_n 32: chunk_id 1: wid 5: task_wid 1
   task_id 2: seq_n 33: chunk_id 1: wid 5: task_wid 1
   task_id 2: seq_n 34: chunk_id 2: wid 6: task_wid 2
   task_id 2: seq_n 35: chunk_id 2: wid 6: task_wid 2
   task_id 2: seq_n 36: chunk_id 2: wid 6: task_wid 2
   task_id 2: seq_n 37: chunk_id 3: wid 5: task_wid 1
   task_id 2: seq_n 38: chunk_id 3: wid 5: task_wid 1
   task_id 2: seq_n 39: chunk_id 3: wid 5: task_wid 1

=head1 GLOBALLY SCOPED VARIABLES AND MCE MODELS

It is possible that Perl may create a new code ref on subsequent runs causing
MCE models to re-spawn. One solution to this is to declare global variables,
referenced by workers, with "our" instead of "my".

Let's take a look. The $i variable is declared with my and being reference in
both user_begin and mce_loop blocks. This will cause Perl to create a new code
ref for mce_loop on subsequent runs.

   use MCE::Loop;

   my $i = 0;   ## <-- this is the reason, try our instead

   MCE::Loop::init {
      user_begin => sub {
         print "process_id: $$\n" if MCE->wid == 1;
         $i++;
      },
      chunk_size => 1, max_workers => 'auto',
   };

   for (1..2) {
      ## Perl creates another code block ref causing workers
      ## to re-spawn on subsequent runs.
      print "\n"; mce_loop { print "$i: $_\n" } 1..4;
   }

   MCE::Loop::finish;

   -- Output

   process_id: 51380
   1: 1
   1: 2
   1: 3
   1: 4

   process_id: 51388
   1: 1
   1: 2
   1: 3
   1: 4

By making the one line change, we see that workers persist for the duration of
the script.

   use MCE::Loop;

   our $i = 0;  ## <-- changed my to our

   MCE::Loop::init {
      user_begin => sub {
         print "process_id: $$\n" if MCE->wid == 1;
         $i++;
      },
      chunk_size => 1, max_workers => 'auto',
   };

   for (1..2) {
      ## Workers persist between runs. No re-spawning.
      print "\n"; mce_loop { print "$i: $_\n" } 1..4;
   }

   -- Output

   process_id: 51457
   1: 1
   1: 2
   1: 4
   1: 3

   process_id: 51457
   2: 1
   2: 2
   2: 3
   2: 4

One may alternatively specify a code reference to existing routines for
user_begin and mce_loop. Take notice of the comma after \&_func though.

   use MCE::Loop;

   my $i = 0;  ## my (ok)

   sub _begin {
      print "process_id: $$\n" if MCE->wid == 1;
      $i++;
   }
   sub _func {
      print "$i: $_\n";
   }

   MCE::Loop::init {
      user_begin => \&_begin,
      chunk_size => 1, max_workers => 'auto',
   };

   for (1..2) {
      print "\n"; mce_loop \&_func, 1..4;
   }

   MCE::Loop::finish;

   -- Output

   process_id: 51626
   1: 1
   1: 2
   1: 3
   1: 4

   process_id: 51626
   2: 1
   2: 2
   2: 3
   2: 4

=head1 MONTE CARLO SIMULATION

There is an article on the web (search for comp.lang.perl.misc MCE) suggesting
that MCE::Examples does not cover a simple simulation scenario. This section
demonstrates just that.

The serial code is based off the one by "gamo". A sleep is added to imitate
extra CPU time. The while loop is wrapped within a for loop to run 10 times.
The random number generator is seeded as well.

   use Time::HiRes qw/sleep time/;

   srand 5906;

   my ($var, $foo, $bar) = (1, 2, 3);
   my ($r, $a, $b);

   my $start = time;

   for (1..10) {
      while (1) {
         $r = rand;

         $a = $r * ($var + $foo + $bar);
         $b = sqrt($var + $foo + $bar);

         last if ($a < $b + 0.001 && $a > $b - 0.001);
         sleep 0.002;
      }

      print "$r -> $a\n";
   }

   my $end = time;

   printf {*STDERR} "\n## compute time: %0.03f secs\n\n", $end - $start;

   -- Output

   0.408246276657106 -> 2.44947765994264
   0.408099657137821 -> 2.44859794282693
   0.408285842931324 -> 2.44971505758794
   0.408342292008765 -> 2.45005375205259
   0.408333076522673 -> 2.44999845913604
   0.408344266898869 -> 2.45006560139321
   0.408084104120526 -> 2.44850462472316
   0.408197400014714 -> 2.44918440008828
   0.408344783704855 -> 2.45006870222913
   0.408248062985479 -> 2.44948837791287

   ## compute time: 93.049 secs

Next, we'd do the same with MCE. The demonstration requires at least MCE 1.509
to run properly. Folks on prior releases (1.505 - 1.508) will not see output
for the 2nd run and beyond.

   use Time::HiRes qw/sleep time/;
   use MCE::Loop;

   srand 5906;

   ## Configure MCE. Move common variables inside the user_begin
   ## block when not needed by the manager process.

   MCE::Loop::init {
      user_begin => sub {
         use vars qw($var $foo $bar);
         our ($var, $foo, $bar) = (1, 2, 3);
      },
      chunk_size => 1, max_workers => 'auto',
      input_data => \&_input, gather => \&_gather
   };

   ## Callback functions.

   my ($done, $r, $a);

   sub _input {
      return if $done;
      return rand;
   }

   sub _gather {
      my ($_r, $_a, $_b) = @_;
      return if $done;

      if ($_a < $_b + 0.001 && $_a > $_b - 0.001) {
         ($done, $r, $a) = (1, $_r, $_a);
      }
      return;
   }

   ## Compute in parallel.

   my $start = time;

   for (1..10) {
      $done = 0;      ## Reset $done before running

      mce_loop {
       # my ($mce, $chunk_ref, $chunk_id) = @_;
       # my $r = $chunk_ref->[0];

         my $r = $_;  ## Valid due to chunk_size => 1

         my $a = $r * ($var + $foo + $bar);
         my $b = sqrt($var + $foo + $bar);

         MCE->gather($r, $a, $b);
         sleep 0.002;
      };

      print "$r -> $a\n";
   }

   printf "\n## compute time: %0.03f secs\n\n", time - $start;

   -- Output

   0.408246276657106 -> 2.44947765994264
   0.408099657137821 -> 2.44859794282693
   0.408285842931324 -> 2.44971505758794
   0.408342292008765 -> 2.45005375205259
   0.408333076522673 -> 2.44999845913604
   0.408344266898869 -> 2.45006560139321
   0.408084104120526 -> 2.44850462472316
   0.408197400014714 -> 2.44918440008828
   0.408344783704855 -> 2.45006870222913
   0.408248062985479 -> 2.44948837791287

   ## compute time: 12.990 secs

Well, there you have it. MCE is able to complete the same simulation many
times faster.

=head1 MULTIPLE WORKERS RUNNING IN PARALLEL

There are occasions when one wants several workers to run in parallel without
having to specify input_data or seqeunce. These two options are optional in
MCE. The "do" and "sendto" methods, for sending data to the manager process,
are demonstrated below. Both process serially by the manager process on a
first come, first serve basis.

   use MCE::Flow max_workers => 4;

   sub report_stats {
      my ($wid, $msg, $h_ref) = @_;
      print "Worker $wid says $msg: ", $h_ref->{"counter"}, "\n";
   }

   mce_flow sub {
      my ($mce) = @_;
      my $wid = MCE->wid;

      if ($wid == 1) {
         my %h = ("counter" => 0);
         while (1) {
            $h{"counter"} += 1;
            MCE->do("report_stats", $wid, "Hey there", \%h);
            last if ($h{"counter"} == 4);
            sleep 2;
         }
      }
      else {
         my %h = ("counter" => 0);
         while (1) {
            $h{"counter"} += 1;
            MCE->do("report_stats", $wid, "Welcome..", \%h);
            last if ($h{"counter"} == 2);
            sleep 4;
         }
      }

      MCE->print(\*STDERR, "Worker $wid is exiting\n");
   };

   -- Output

   Note how worker 2 comes first in the 2nd run below.

   $ ./demo.pl
   Worker 1 says Hey there: 1
   Worker 2 says Welcome..: 1
   Worker 3 says Welcome..: 1
   Worker 4 says Welcome..: 1
   Worker 1 says Hey there: 2
   Worker 2 says Welcome..: 2
   Worker 3 says Welcome..: 2
   Worker 1 says Hey there: 3
   Worker 2 is exiting
   Worker 3 is exiting
   Worker 4 says Welcome..: 2
   Worker 4 is exiting
   Worker 1 says Hey there: 4
   Worker 1 is exiting

   $ ./demo.pl
   Worker 2 says Welcome..: 1
   Worker 1 says Hey there: 1
   Worker 4 says Welcome..: 1
   Worker 3 says Welcome..: 1
   Worker 1 says Hey there: 2
   Worker 2 says Welcome..: 2
   Worker 4 says Welcome..: 2
   Worker 3 says Welcome..: 2
   Worker 2 is exiting
   Worker 4 is exiting
   Worker 1 says Hey there: 3
   Worker 3 is exiting
   Worker 1 says Hey there: 4
   Worker 1 is exiting

=head1 INDEX

L<MCE|MCE>

=head1 AUTHOR

Mario E. Roy, S<E<lt>marioeroy AT gmail DOT comE<gt>>

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.

=cut

